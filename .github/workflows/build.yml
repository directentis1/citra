name: citra-build

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

jobs:
  source:
    if: ${{ !github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: artifacts/
  linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: ["appimage", "fresh"]
    container:
      image: pablomk7/build-environments:linux-${{ matrix.target }}
      options: -u 1001
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Install essential packages
        run: sudo apt-get install sudo
      - name: Install Clang PPA 
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest 
      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@v1.1.1
        with:
         version: latest
         cache: true
      - name: Install New Packages
        uses: gerlero/apt-install@v1
        with:
          packages: ccache clang-18 clang-tools-18 clang-18-doc libclang-common-18-dev libclang-18-dev libclang1-18 clang-format-18 python3-clang-18 clangd-18 clang-tidy-18 clang-format-18 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.7.3'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Build
        run: ./.ci/linux.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  android:
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Set tag name
        run: |
          if [[ "$GITHUB_REF_NAME" =~ ^canary- ]] || [[ "$GITHUB_REF_NAME" =~ ^nightly- ]]; then
              echo "GIT_TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi
          echo $GIT_TAG_NAME
      - name: Deps
        run: |
          sudo add-apt-repository -y ppa:theofficialgman/gpu-tools
          sudo apt-get update -y
          sudo apt-get install ccache apksigner -y
      - name: Build
        run: JAVA_HOME=$JAVA_HOME_17_X64 ./.ci/android.sh
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
      - name: Pack
        run: ../../../.ci/pack.sh
        working-directory: src/android/app
        env:
          UNPACKED: 1
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: src/android/app/artifacts/
  release:
    runs-on: ubuntu-latest
    needs: [linux, android, source]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.4.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.AppImage","./**/*.7z","./**/*.zip","./**/*.apk","./**/*.aab"]'

